import java.util.zip.GZIPInputStream
/**
*   This bam_parser namespace is used to parse the header from a BAM file.
*   The information is loaded into a Map.
*/
bam_parser {
    /**
    *   Set up the decompressed SAM file reader for the input BAM
    */
    get_sam_reader = { String bam_path ->
        InputStream gzip_stream = new GZIPInputStream(new FileInputStream(bam_path))
        BufferedReader reader = new BufferedReader(new InputStreamReader(gzip_stream, 'UTF-8'))

        // Mark position with 1000 character buffer
        reader.mark(1000)
        def chars_to_skip = 0
        def curr_char = reader.read()

        while (curr_char != -1 && (char)curr_char != '@') {
            curr_char = reader.read()
            chars_to_skip = chars_to_skip + 1
        }

        if (curr_char == -1) {
            throw new Exception("Failed to find header in BAM: ${bam_path}")
        }

        reader.reset()
        reader.skip(chars_to_skip)

        return reader
    }

    /**
    *   Parse read group line
    */
    parse_read_group = { String line ->
        def rg_map = [:]
        (line =~ /(?<tag>[A-Za-z][A-Za-z0-9]):(?<value>[ -~]+)/).each{ match, tag, value ->
            rg_map[tag] = value
        }

        return rg_map
    }

    /**
    *   Main parsing function for calling. Returns parsed data as a Map.
    */
    parse_bam_header = { String bam_path ->
        def sam_reader = bam_parser.get_sam_reader(bam_path)
        def line = sam_reader.readLine()
        def parsed_header = [:]
        parsed_header['read_group'] = []
        while (line && line.startsWith('@')) {
            // Handle different header lines here
            if (line.startsWith('@RG')) {
                parsed_header['read_group'].add(bam_parser.parse_read_group(line))
            }
            line = sam_reader.readLine()
        }

        return parsed_header
    }
}

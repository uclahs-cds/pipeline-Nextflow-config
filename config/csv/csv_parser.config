/**
*   This csv_parser namespace is used to load a CSV file with a header.
*   The information is loaded as a list of Maps, with each line in the CSV corresponding to a Map.
*/
csv_parser {
    /**
    *   Using the header parts, find the indices of each field requested.
    *   @throws IllegalArgumentException when a field is missing from the header.
    */
    get_field_indices = { String header, List fields ->
        def header_parts = header.split(',') as List
        def field_indices = [:]
        fields.each { field ->
            field_indices[field] = header_parts.indexOf(field)
            if (field_indices[field] == -1) {
                throw new IllegalArgumentException("Failed to find field: ${field} in header of CSV.")
            }
        }

        return field_indices
    }

    /**
    *   Split each line and parse contents into Map.
    *   @throws IllegalArgumentException when a field is missing from a single line.
    */
    parse_line = { String line, Map field_indices ->
        def line_parts = line.split(',') as List
        def line_fields = [:]
        field_indices.each { field, index ->
            line_fields[field] = line_parts[index]
            if (!line_fields[field]) {
                throw new IllegalArgumentException("Field: ${field} not found for line: ${line}")
            }
        }

        return line_fields
    }

    /**
    *   Main parsing function for calling. Returns parsed data as a list of Maps.
    */
    parse_csv = { String csv_file, List fields ->
        def reader = new BufferedReader(new FileReader(csv_file))
        def header = reader.readLine()
        def field_indices = csv_parser.get_field_indices(header, fields)

        def parsed_lines = []
        def line = ''
        while ( (line = reader.readLine()) != null ) {
            parsed_lines.add(csv_parser.parse_line(line, field_indices))
        }

        return parsed_lines
    }
}

import nextflow.util.SysHelper
<<<<<<< HEAD
includeConfig "../schema/schema.config"
=======
>>>>>>> main

/**
*   This methods namespace contains common functions for pipeline set up.
*/
methods {
    /**
    *   Detect and load base and node-specific resource allocations
    */
    set_resources_allocation = {
        def node_cpus = SysHelper.getAvailCpus()
        def node_memory_GB = SysHelper.getAvailMemory().toGiga()
        // Load base.config by default for all pipelines
        includeConfig "${projectDir}/config/base.config"
        if (params.containsKey('ucla_cds') && params.ucla_cds) {
            if (node_cpus == 64) {
                // Check memory for M64 node
                if (node_memory_GB >= 950 && node_memory_GB <= 1010) {
                    includeConfig "${projectDir}/config/M64.config"
                } else {
                    throw new Exception("     ### ERROR ###     System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            } else {
                // Check memory for F series node
                if (node_memory_GB >= (node_cpus * 2 * 0.9 - 1) && node_memory_GB <= (node_cpus * 2)) {
                    includeConfig "${projectDir}/config/F${node_cpus}.config"
                } else {
                    throw new Exception("     ### ERROR ###     System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            }
        }
    }
<<<<<<< HEAD

    /**
    *   Generate the output path for registered output
    */
    generate_registered_output_directory = { String data_dir="/hot/data" ->
        // Generate and save UUID in params for access 
        params.run_uuid = UUID.randomUUID().toString()

        def required_information = [
            'dataset_id',
            'patient_id',
            'sample_id',
            'analyte',
            'technology',
            'reference_genome_version',
        ]
    }
=======
>>>>>>> main
}

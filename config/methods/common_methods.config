import nextflow.util.SysHelper
includeConfig "../schema/schema.config"

/**
*   This methods namespace contains common functions for pipeline set up.
*/
methods {
    /**
    *   Detect and load base and node-specific resource allocations
    */
    set_resources_allocation = {
        def node_cpus = SysHelper.getAvailCpus()
        def node_memory_GB = SysHelper.getAvailMemory().toGiga()
        // Load base.config by default for all pipelines
        includeConfig "${projectDir}/config/base.config"
        if (params.containsKey('ucla_cds') && params.ucla_cds) {
            if (node_cpus == 64) {
                // Check memory for M64 node
                if (node_memory_GB >= 950 && node_memory_GB <= 1010) {
                    includeConfig "${projectDir}/config/M64.config"
                } else {
                    throw new Exception("     ### ERROR ###     System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            } else {
                // Check memory for F series node
                if (node_memory_GB >= (node_cpus * 2 * 0.9 - 1) && node_memory_GB <= (node_cpus * 2)) {
                    includeConfig "${projectDir}/config/F${node_cpus}.config"
                } else {
                    throw new Exception("     ### ERROR ###     System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            }
        }
    }

    /**
    *   Ensure all required params are provided
    */
    check_registered_output_params = {
        // TO-DO: Regex/custom validation for standardized fields, like dataset_id
        //          Can create a custom schema for dataset registration-specific fields
        def required_information = [
            'dataset_id',
            'patient_id',
            'sample_id',
            'analyte',
            'technology',
            'processing',
            'reference_genome_version',
        ]

        def missing_information = []

        for (field in required_information) {
            if ( !(params.containsKey(field) && params[field])) {
                missing_information.add(field)
            }
        }

        if (missing_information.size != 0) {
            throw new Exception("     ### ERROR ###     Missing params required for registered dataset output directory generation: ${missing_information}.")
        }
    }

    /**
    *   Generate a UUID and save to params
    */
    generate_uuid = {
        params.run_uuid = UUID.randomUUID().toString()
    }

    /**
    *   Generate the output path for registered output
    */
    generate_registered_output_directory = { String data_dir="/hot/data" ->
        methods.generate_uuid()
        methods.check_registered_output_params()

        def disease = params.dataset_id.subString(0, 4)
        def registered_output_directory = "${data_dir}/${disease}/${params.dataset_id}/${params.patient_id}/${params.sample_id}/${params.analyte}/${params.technology}/${params.processing}/${params.reference_genome_version}"

        schema.check_path(registered_output_directory, 'w')
        return registered_output_directory
    }
}

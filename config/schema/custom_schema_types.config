/**
* This custom schema namespace implements a custom type for checking input FASTQs as a list of Maps.
*/
custom_schema_types {
    allowed_input_types = [
        'FASTQ',
        'BAM'
    ]
    allowed_bam_types = [
        'normal',
        'tumor'
    ]

    /**
    * Check that input types are in allowed list
    * @throws IllegalArgumentException when parameter is not a valid choice.
    */
    check_input_type_keys = { List given, String name, List choices=custom_schema_types.allowed_input_types ->
        for (elem in given) {
            if (!(elem in choices)) {
                throw new IllegalArgumentException("Invalid parameter ${name}. Valid types: ${choices}.")
            }
        }
    }

    /**
    *   Check if input is a String or GString
    */
    is_string = { val ->
        return (val in String || val in GString)
    }

    /**
    * Check if given input is a Namespace
    * @throws IllegalStateException when parameter is not the correct type (Namespace).
    */
    check_if_namespace = { val, String name ->
        if (!(val in Map)) {
            throw new IllegalStateException("${name} should be a Namespace, not ${val.getClass()}.")
        }
    }

    /**
    * Check if given input is a list
    */
    check_if_list = { val, String name ->
        if (!(val in List || val in Set)) {
            throw new Exception("${name} should be a List, not ${val.getClass()}.")
        }
    }

    /**
    *   Check if given input is a number
    */
    check_if_number = { val, String name ->
        if (!(val in Integer || val in Float)) {
            throw new Exception("${name} should be an Integer or Float, not ${val.getClass()}")
        }
    }

    /**
    * Check list of namespace
    */
    check_list_of_namespace = { Map options, String name, Map properties ->
        for (item in options[name]) {
            custom_schema_types.check_if_namespace(item, name)
            properties.elements.each { key, val ->
                schema.validate_parameter(item, key, val)
            }
        }
    }

    /**
    * Check namespace BAM
    */
    check_bam_namespace = { Map options, String name, Map properties ->
        custom_schema_types.check_if_namespace(options[name], name)
        def given_keys = options[name].keySet() as ArrayList
        if (given_keys.size() <= 0) {
            throw new Exception("No inputs provided! Please provide inputs in the CSV or YAML.")
        }
        custom_schema_types.check_input_type_keys(given_keys, name, custom_schema_types.allowed_bam_types)

        options[name].each { entry ->
            def entry_as_map = [:]
            entry_as_map[entry.key] = entry.value
            schema.validate_parameter(entry_as_map, entry.key, properties.elements[entry.key])
        }
    }

    /**
    * Check if list of readable files
    */
    check_readable_file_list = { Map options, String name, Map properties ->
        custom_schema_types.check_if_list(options[name], name)
        for (item in options[name]) {
            schema.check_path(item, 'r')
        }
    }

    /**
    * Check that input is namespace of expected types
    */
    check_input_namespace = { Map options, String name, Map properties ->
        // Check parameters keys
        custom_schema_types.check_if_namespace(options[name], name)
        def given_keys = options[name].keySet() as ArrayList
        custom_schema_types.check_input_type_keys(given_keys, name)

        options[name].each { entry ->
            def entry_as_map = [:]
            entry_as_map[entry.key] = entry.value
            schema.validate_parameter(entry_as_map, entry.key, properties.elements[entry.key])
        }
    }

    types = [
        'InputNamespace': custom_schema_types.check_input_namespace,
        'ListFASTQPairs': custom_schema_types.check_list_of_namespace,
        'InputBAMNamespace': custom_schema_types.check_bam_namespace,
        'BAMEntryList': custom_schema_types.check_readable_file_list
        'ReadableFileList': custom_schema_types.check_readable_file_list
    ]
}
